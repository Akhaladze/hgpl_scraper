Консольные команды
Войдём в контейнер через RabbitMQ (чтобы выполнять команды Rabbit надо находиться на сервере с Rabbit):

docker-compose exec rabbitmq bash
rabbitmqctl — утилита, работающая без авторизации, но только локально рядом с RabbitMQ. Нужна для обслуживания сервера/кластера, в том числе для решения проблем.

Основные кейсы использования:

настройка кластера; 

сброс авторизации. Например, если вы потеряли доступ к RabbitMQ, или он перешёл вам исторически и реквизиты доступа не передавали;

принудительная очистка очередей. Если веб интерфейс/AMQP не отвечает из-за слишком большого количества сообщений в очередях.

Можно посмотреть список очередей, exchanges:

rabbitmqctl list_queues
rabbitmqctl list_exchanges

##########################################################################################

Примеры команд:

rabbitmqadmin -urmuser -prmpassword declare queue name=console_queue
rabbitmqadmin -urmuser -prmpassword declare exchange name=console_exchange type=direct
rabbitmqadmin -urmuser -prmpassword declare binding source=console_exchange destination=console_queue routing_key=test
rabbitmqadmin -urmuser -prmpassword publish routing_key=console_queue payload="test message from rabbitmqadmin"
rabbitmqadmin -urmuser -prmpassword publish exchange=console_exchange routing_key=test payload="test message from rabbitmqadmin"
rabbitmqadmin -urmuser -prmpassword get queue=console_queue count=10
rabbitmqadmin -urmuser -prmpassword list queues
rabbitmqadmin -urmuser -prmpassword list exchanges
rabbitmqadmin -urmuser -prmpassword list bindings


##########################################################################################


Для экспорта всех сущностей (кроме сообщений) можно использовать команду экспорт:

rabbitmqadmin -urmuser -prmpassword export backup.json
Аналогично с импортом:

rabbitmqadmin -urmuser -prmpassword import backup.json



##########################################################################################

https://habr.com/ru/companies/slurm/articles/704208/

##########################################################################################

Полезные аргументы очереди
При создании очереди вы можете задекларировать аргументы, влияющие на её поведение. Например, вы можете задать TTL (время жизни) сообщений в этой очереди. Оно задается аргументом x-message-ttl в миллисекундах. 
Также есть x-max-length — он отвечает за максимальную длину очереди, и в зависимости от настройки x-overflow сообщения или будут отбрасываться с головы (drop-head, по умолчанию) или, как на скриншоте, будут отдавать ошибку publisher. 

Policy
Возможность добавлять атрибуты очереди/exchange без передекларирования.
Скажем, вы хотите добавить максимальную длину и TTL на хранение сообщений для очереди inbox. Создаём такой policy (на вкладке admin):


Не рекомендую использовать priority 0 — теряете возможность гибко создавать более и менее приоритетные policy. Обычно первую policy я создаю с приоритетом 5.
Только одно policy может действовать одновременно на одну очередь. Мы можем создать одну общую policy для всех (удобно для кластера), но при создании более частных политик нужно делать им приоритет выше и перечислять все параметры, которые использовались для общего списка.
Проверяем очередь, видим действующую политику:

Если у очереди уже есть действующие аналогичные политики, действовать будет та, которая наступит раньше (меньший TTL/меньшая длина очереди). 

##########################################################################################
Admin
Вкладка для администрирования некоторых параметров RabbitMQ, в частности:
##########################################################################################
Users — управление пользователями и их правами;
Virtual Hosts — управление виртуальными хостами (изолированые окружения внутри одного кластера);
Feature Flags — отображение включенного функционала RabbitMQ;
Policies — policy, описано выше;
Limits — настройки ограничений;
Cluster — параметры кластера (по факту только названия).
##########################################################################################

##########################################################################################
##CONFIGURATION WITH ENVIRONMENT VARIABLES
##########################################################################################

https://www.rabbitmq.com/configure.html#supported-environment-variables

All environment variables used by RabbitMQ use the prefix RABBITMQ_ (except when defined in rabbitmq-env.conf or rabbitmq-env-conf.bat).

Name	Description
RABBITMQ_NODE_IP_ADDRESS	Change this if you only want to bind to one network interface. Binding to two or more interfaces can be set up in the configuration file.
Default: an empty string, meaning "bind to all network interfaces".

RABBITMQ_NODE_PORT	See Networking guide for more information on ports used by various parts of RabbitMQ.
Default: 5672.

RABBITMQ_DIST_PORT	Port used for inter-node and CLI tool communication. Ignored if node config file sets kernel.inet_dist_listen_min or kernel.inet_dist_listen_max keys. See Networking for details, and Windows Quirks for Windows-specific details.
Default: RABBITMQ_NODE_PORT + 20000

ERL_EPMD_ADDRESS	Interface(s) used by epmd, a component in inter-node and CLI tool communication.
Default: all available interfaces, both IPv6 and IPv4.

ERL_EPMD_PORT	Port used by epmd, a component in inter-node and CLI tool communication.
Default: 4369

RABBITMQ_DISTRIBUTION_BUFFER_SIZE	Outgoing data buffer size limit to use for inter-node communication connections, in kilobytes. Values lower than 64 MB are not recommended.
Default: 128000

RABBITMQ_NODENAME	The node name should be unique per Erlang-node-and-machine combination. To run multiple nodes, see the clustering guide.
Default:

Unix*: rabbit@$HOSTNAME
Windows: rabbit@%COMPUTERNAME%
RABBITMQ_CONFIG_FILE	Main RabbitMQ config file path, for example, /etc/rabbitmq/rabbitmq.conf or /data/configuration/rabbitmq.conf for new style configuration format files. If classic config format it used, the extension must be .config
Default:

Generic UNIX: $RABBITMQ_HOME/etc/rabbitmq/rabbitmq.conf
Debian: /etc/rabbitmq/rabbitmq.conf
RPM: /etc/rabbitmq/rabbitmq.conf
MacOS(Homebrew): ${install_prefix}/etc/rabbitmq/rabbitmq.conf, the Homebrew prefix is usually /usr/local or /opt/homebrew
Windows: %APPDATA%\RabbitMQ\rabbitmq.conf
RABBITMQ_CONFIG_FILES	Path to a directory of RabbitMQ configuration files in the new-style (.conf) format. The files will be loaded in alphabetical order. Prefixing each files with a number is a common practice.
Default:

Generic UNIX: $RABBITMQ_HOME/etc/rabbitmq/conf.d
Debian: /etc/rabbitmq/conf.d
RPM: /etc/rabbitmq/conf.d
MacOS(Homebrew): ${install_prefix}/etc/rabbitmq/conf.d, the Homebrew prefix is usually /usr/local or /opt/homebrew
Windows: %APPDATA%\RabbitMQ\conf.d
RABBITMQ_ADVANCED_CONFIG_FILE	"Advanced" (Erlang term-based) RabbitMQ config file path with a .config file extension. For example, /data/rabbitmq/advanced.config.
Default:

Generic UNIX: $RABBITMQ_HOME/etc/rabbitmq/advanced.config
Debian: /etc/rabbitmq/advanced.config
RPM: /etc/rabbitmq/advanced.config
MacOS (Homebrew): ${install_prefix}/etc/rabbitmq/advanced.config, the Homebrew prefix is usually /usr/local or /opt/homebrew
Windows: %APPDATA%\RabbitMQ\advanced.config
RABBITMQ_CONF_ENV_FILE	Location of the file that contains environment variable definitions (without the RABBITMQ_ prefix). Note that the file name on Windows is different from other operating systems.
Default:

Generic UNIX package: $RABBITMQ_HOME/etc/rabbitmq/rabbitmq-env.conf
Ubuntu and Debian: /etc/rabbitmq/rabbitmq-env.conf
RPM: /etc/rabbitmq/rabbitmq-env.conf
MacOS (Homebrew): ${install_prefix}/etc/rabbitmq/rabbitmq-env.conf, the Homebrew prefix is usually /usr/local or /opt/homebrew
Windows: %APPDATA%\RabbitMQ\rabbitmq-env-conf.bat
RABBITMQ_LOG_BASE	Can be used to override log files directory location.
Default:

Generic UNIX package: $RABBITMQ_HOME/var/log/rabbitmq
Ubuntu and Debian packages: /var/log/rabbitmq
RPM: /var/log/rabbitmq
MacOS (Homebrew): ${install_prefix}/var/log/rabbitmq, the Homebrew prefix is usually /usr/local or /opt/homebrew
Windows: %APPDATA%\RabbitMQ\log
RABBITMQ_MNESIA_BASE	This base directory contains sub-directories for the RabbitMQ server's node database, message store and cluster state files, one for each node, unless RABBITMQ_MNESIA_DIR is set explicitly. It is important that effective RabbitMQ user has sufficient permissions to read, write and create files and subdirectories in this directory at any time. This variable is typically not overridden. Usually RABBITMQ_MNESIA_DIR is overridden instead.
Default:

Generic UNIX package: $RABBITMQ_HOME/var/lib/rabbitmq/mnesia
Ubuntu and Debian packages: /var/lib/rabbitmq/mnesia/
RPM: /var/lib/rabbitmq/plugins
MacOS (Homebrew): ${install_prefix}/var/lib/rabbitmq/mnesia, the Homebrew prefix is usually /usr/local or /opt/homebrew
Windows: %APPDATA%\RabbitMQ
RABBITMQ_MNESIA_DIR	The directory where this RabbitMQ node's data is stored. This includes a schema database, message stores, cluster member information and other persistent node state.
Default:

Generic UNIX package: $RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME
Ubuntu and Debian packages: $RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME
RPM: $RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME
MacOS (Homebrew): ${install_prefix}/var/lib/rabbitmq/mnesia/$RABBITMQ_NODENAME, the Homebrew prefix is usually /usr/local or /opt/homebrew
Windows: %APPDATA%\RabbitMQ\$RABBITMQ_NODENAME
RABBITMQ_PLUGINS_DIR	The list of directories where plugin archive files are located and extracted from. This is PATH-like variable, where different paths are separated by an OS-specific separator (: for Unix, ; for Windows). Plugins can be installed to any of the directories listed here. Must not contain any characters mentioned in the path restriction section. See CLI tools guide to learn about the effects of changing this variable on rabbitmq-plugins.
Default:

Generic UNIX package: $RABBITMQ_HOME/plugins
Ubuntu and Debian packages: /var/lib/rabbitmq/plugins
RPM: /var/lib/rabbitmq/plugins
MacOS (Homebrew): ${install_prefix}/Cellar/rabbitmq/${version}/plugins, the Homebrew prefix is usually /usr/local or /opt/homebrew
Windows: %RABBITMQ_HOME%\plugins
RABBITMQ_PLUGINS_EXPAND_DIR	The directory the node expand (unpack) plugins to and use it as a code path location. Must not contain any characters mentioned in the path restriction section.
Default:

Generic UNIX package: $RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME-plugins-expand
Ubuntu and Debian packages: $RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME-plugins-expand
RPM: $RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME-plugins-expand
MacOS (Homebrew): ${install_prefix}/var/lib/rabbitmq/mnesia/$RABBITMQ_NODENAME-plugins-expand
Windows: %APPDATA%\RabbitMQ\$RABBITMQ_NODENAME-plugins-expand
RABBITMQ_USE_LONGNAME	When set to true this will cause RabbitMQ to use fully qualified names to identify nodes. This may prove useful in environments that use fully-qualified domain names or use IP addresses as hostnames or part of node names. Note that it is not possible to switch a node from short name to long name without resetting it.
Default: false

RABBITMQ_SERVICENAME	The name of the installed Windows service. This will appear in services.msc.
Default: RabbitMQ.

RABBITMQ_CONSOLE_LOG	Set this variable to new or reuse to redirect console output from the server to a file named %RABBITMQ_SERVICENAME% in the default RABBITMQ_BASE directory.
If not set, console output from the server will be discarded (default).
new: a new file will be created each time the service starts.
reuse: the file will be overwritten each time the service starts.
Default: (none)

RABBITMQ_SERVER_CODE_PATH	
Extra code path (a directory) to be specified when starting the runtime. Will be passed to the erl command when a node is started.

Default: (none)

RABBITMQ_CTL_ERL_ARGS	Parameters for the erl command used when invoking rabbitmqctl. This could be set to specify a range of ports to use for Erlang distribution:
-kernel inet_dist_listen_min 35672
-kernel inet_dist_listen_max 35680
Default: (none)

RABBITMQ_SERVER_ERL_ARGS	Standard parameters for the erl command used when invoking the RabbitMQ Server. This should be overridden for debugging purposes only. Overriding this variable replaces the default value.
Default:

Unix*: +P 1048576 +t 5000000 +stbt db +zdbbl 128000
Windows: None
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS	Additional parameters for the erl command used when invoking the RabbitMQ Server. The value of this variable is appended to the default list of arguments (RABBITMQ_SERVER_ERL_ARGS).
Default:

Unix*: None
Windows: None
RABBITMQ_SERVER_START_ARGS	Extra parameters for the erl command used when invoking the RabbitMQ Server. This will not override RABBITMQ_SERVER_ERL_ARGS.
Default: (none)

RABBITMQ_DEFAULT_USER	This environment variable is only meant to be used in development and CI environments. This has the same meaning as default_user in rabbitmq.conf but higher priority. This option may be more convenient in cases where providing a config file is impossible, and environment variables is the only way to seed a user.
Default: (none)

RABBITMQ_DEFAULT_PASS	This environment variable is only meant to be used in development and CI environments. This has the same meaning as default_pass in rabbitmq.conf but higher priority. This option may be more convenient in cases where providing a config file is impossible, and environment variables is the only way to seed a user.
Default: (none)

RABBITMQ_DEFAULT_VHOST	This environment variable is only meant to be used in development and CI environments. This has the same meaning as default_vhost in rabbitmq.conf but higher priority. This option may be more convenient in cases where providing a config file is impossible, and environment variables is the only way to seed users and virtual hosts.
Default: (none)

Besides the variables listed above, there are several environment variables which tell RabbitMQ where to locate its database, log files, plugins, configuration and so on.

Finally, some environment variables are operating system-specific.

Name	Description
HOSTNAME	The name of the current machine.
Default:

Unix, Linux: env hostname
MacOS: env hostname -s
COMPUTERNAME	The name of the current machine.
Default:

Windows: localhost
ERLANG_SERVICE_MANAGER_PATH	This path is the location of erlsrv.exe, the Erlang service wrapper script.
Default:

Windows Service: %ERLANG_HOME%\erts-x.x.x\bin


##########################################################################################
Operating System Kernel Limits
##########################################################################################

With Docker
To configure kernel limits for Docker contains, use the "default-ulimits" key in Docker daemon configuration file. The file has to be installed on Docker hosts at /etc/docker/daemon.json:

{
  "default-ulimits": {
    "nofile": {
      "Name": "nofile",
      "Hard": 64000,
      "Soft": 64000
    }
  }
}

##########################################################################################
File and Directory Locations
##########################################################################################
Default Locations on Linux, macOS, BSD
In the following table the ${install_prefix} to some paths is indicated. Homebrew installations use the installation-prefix (Homebrew Cellar) when installed. By default this is /usr/local.

Debian and RPM package installations use an empty ${install_prefix}.

Name	Location
RABBITMQ_BASE	(Not used - Windows only)
RABBITMQ_CONFIG_FILE	${install_prefix}/etc/rabbitmq/rabbitmq
RABBITMQ_MNESIA_BASE	${install_prefix}/var/lib/rabbitmq/mnesia
RABBITMQ_MNESIA_DIR	$RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME
RABBITMQ_LOG_BASE	${install_prefix}/var/log/rabbitmq
RABBITMQ_LOGS	$RABBITMQ_LOG_BASE/$RABBITMQ_NODENAME.log
RABBITMQ_PLUGINS_DIR	/usr/lib/rabbitmq/plugins:$RABBITMQ_HOME/plugins
Note that /usr/lib/rabbitmq/plugins is used only when RabbitMQ is installed into the standard (default) location.

RABBITMQ_PLUGINS_EXPAND_DIR	$RABBITMQ_MNESIA_BASE/$RABBITMQ_NODENAME-plugins-expand
RABBITMQ_ENABLED_PLUGINS_FILE	${install_prefix}/etc/rabbitmq/enabled_plugins
RABBITMQ_PID_FILE	$RABBITMQ_MNESIA_DIR.pid

##########################################################################################

EXAMPLE CONFIGURATION FILE
##########################################################################################
HOSTNAME
RABBITMQ_DEFAULT_VHOST
